import trenes.*
import Deposito.*
import Vagones.*

describe "Formaciones y deposito"{
	
		var vagoncito = new VagonPasajeros (largo = 10 , ancho = 2, cantidadDeBanios = 2) //este tiene 80 pasajeros peso maximo 6400
		var vagoncito2 = new VagonPasajeros (largo = 10 , ancho = 3, cantidadDeBanios = 3)
		var vagoncito3 = new VagonPasajeros (largo = 2 , ancho = 3, cantidadDeBanios = 4)
		var vagoncito4 = new VagonPasajeros (largo = 4 , ancho = 2 , cantidadDeBanios = 1)
		var vagoncitoCarga = new VagonCarga (cargaMaxima = 200)
		var vagoncitoCarga2 = new VagonCarga (cargaMaxima = 2000)
		var tren1 = new FormacionCortaDistancia()
		var tren2 = new FormacionCortaDistancia()
		var locomotora = new Locomotora()
	    var locomotora2 = new Locomotora()
		var depositoTrenes = new Deposito()
	
		
		

test "si tenemos dos vagones de pasajeros, los dos de 10 metros de largo,
 uno de 2 metros de ancho útil, y otro de 3 metros de ancho útil, entonces
 el primero puede llevar 80 pasajeros, y el segundo puede llevar 100.
 Un vagón de pasajeros no puede llevar carga." {
		assert.equals(80, vagoncito.cantidadPasajerosATransportar())
		assert.equals(100, vagoncito2.cantidadPasajerosATransportar())
}


test  "Cantidad total de pasajeros a transportar"{
	tren1.agregarVagonAFormacion(vagoncito)
	tren1.agregarVagonAFormacion(vagoncito2)
	assert.equals(180, tren1.totalPasajerosATransportar())
	
}

test "Cuantos Vagones Livianos hay, son livianos si peso maximo es menor a 2500"{
	tren1.agregarVagonAFormacion(vagoncito)// 
	tren1.agregarVagonAFormacion(vagoncito2)// este tiene 100 pasajeros peso maximo 8000
	tren1.agregarVagonAFormacion(vagoncito3)// este tiene 16 pasajeros peso maximo 1200
	assert.equals(1, tren1.cuantosVagonesLivianosHay())
}

test "La velocidad máxima de una formación, que es el mínimo entre las velocidades máximas de las locomotoras."{
	locomotora.velocidadMaxima(199)
	locomotora2.velocidadMaxima(40)	
	tren1.agregarLocomotoraAFormacion(locomotora)
	tren1.agregarLocomotoraAFormacion(locomotora2)
	assert.equals(40, tren1.velocidadMaximaLocomotora())
}

test "Si una formación es eficiente; es eficiente si cada una de sus locomotoras arrastra, al menos, 5 veces su peso (el de la locomotora misma)."{
	locomotora.velocidadMaxima(199)
	locomotora2.velocidadMaxima(40)
	locomotora.peso(500)
	locomotora2.peso(100)	
	tren1.agregarLocomotoraAFormacion(locomotora)
	tren1.agregarLocomotoraAFormacion(locomotora2)
	assert.that(tren1.esEficiente())
}

test "Si una formación puede moverse. Una formación puede moverse si el arrastre útil total de sus locomotoras es mayor o igual al peso máximo total de los vagones."{
	tren1.agregarVagonAFormacion(vagoncito)
	tren1.agregarVagonAFormacion(vagoncito2)
	tren1.agregarLocomotoraAFormacion(locomotora)
	tren1.agregarLocomotoraAFormacion(locomotora2)
	locomotora.peso(500)
	locomotora2.peso(100)
	assert.that(tren1.puedeMoverse())	
		
	
}

test "Cuántos kilos de empuje le faltan a una formación para poder moverse, que es: 0 si ya se puede mover, y (peso máximo total de los vagones – arrastre útil total de las locomotoras) en caso contrario."{
	tren1.agregarVagonAFormacion(vagoncito)
	tren1.agregarVagonAFormacion(vagoncito2)
	tren1.agregarLocomotoraAFormacion(locomotora)
	tren1.agregarLocomotoraAFormacion(locomotora2)
	locomotora.peso(500)
	locomotora2.peso(100)
	assert.that(tren1.puedeMoverse())	
	assert.equals(0, tren1.kilosEmpujeFaltantes())
	locomotora.pesoMaximoArrastre(2000)
	locomotora2.pesoMaximoArrastre(1000)
	assert.notThat(tren1.puedeMoverse())
	assert.equals(12000, tren1.kilosEmpujeFaltantes())
}

test "Dado un depósito, obtener el conjunto formado por el vagón más pesado de cada formación; se espera un conjunto de vagones."{
	tren1.agregarVagonAFormacion(vagoncito)
	tren1.agregarVagonAFormacion(vagoncito2)
	depositoTrenes.agregarFormacion(tren1)	
//	assert.equals([vagoncito2] ,depositoTrenes.vagonesMasPesados())
	tren2.agregarVagonAFormacion(vagoncitoCarga)
	tren2.agregarVagonAFormacion(vagoncitoCarga2)
	depositoTrenes.agregarFormacion(tren2)
	assert.equals([vagoncito2, vagoncitoCarga2] ,depositoTrenes.conjuntoVagonesPesados())
	
}

test "Necesita un conductor experimentado"{
	tren1.agregarVagonAFormacion(vagoncito)
	tren1.agregarVagonAFormacion(vagoncito2)
	tren1.agregarLocomotoraAFormacion(locomotora)
	tren1.agregarLocomotoraAFormacion(locomotora2)
	depositoTrenes.agregarFormacion(tren1)
	assert.that(depositoTrenes.necesitaConductorExperimentado(tren1))
	tren2.agregarVagonAFormacion(vagoncito)
	depositoTrenes.agregarFormacion(tren2)
	assert.notThat(depositoTrenes.necesitaConductorExperimentado(tren2))
}

test "Agregar locomotora a formacion de deposito para que pueda moverse"{
	tren1.agregarVagonAFormacion(vagoncito)
	tren1.agregarVagonAFormacion(vagoncito2)
	tren1.agregarVagonAFormacion(vagoncito3)
	tren1.agregarLocomotoraAFormacion(locomotora)
	assert.notThat(tren1.puedeMoverse())
	depositoTrenes.agregarFormacion(tren1)
	depositoTrenes.agregarLocomotora(locomotora2)
	var locomotora3 = new Locomotora(peso = 1000, pesoMaximoArrastre= 5000)
	depositoTrenes.agregarLocomotora(locomotora3)
	depositoTrenes.agregarLocomotoraParaMoverse(tren1)
	assert.equals([tren1, [locomotora2]] ,depositoTrenes.mostrarColeccionDeposito())
	assert.notThat(tren1.puedeMoverse())
	tren1.agregarLocomotoraAFormacion(locomotora2)
	assert.that(tren1.puedeMoverse())
}
test "Formacion Corta Distancia Bien armada"{
	var trenSuarezRetiro = new FormacionCortaDistancia()
	trenSuarezRetiro.agregarVagonAFormacion(vagoncito3)
	trenSuarezRetiro.agregarVagonAFormacion(vagoncito4)
	trenSuarezRetiro.agregarLocomotoraAFormacion(locomotora)
	assert.that(trenSuarezRetiro.estaBienArmada())
}
test "Formacion bien armada de larga distancia tiene un banio cada 50 pasajeros"{
	var trenZarate = new FormacionLargaDistancia()
	trenZarate.agregarVagonAFormacion(vagoncito)
	trenZarate.agregarVagonAFormacion(vagoncito)
	trenZarate.agregarLocomotoraAFormacion(locomotora)
	trenZarate.agregarLocomotoraAFormacion(locomotora2)
	assert.that(trenZarate.estaBienArmada())
}

test "Velocidad Maxima trenCorta Distancia"{
	var trenSuarezRetiro = new FormacionCortaDistancia()
	trenSuarezRetiro.agregarVagonAFormacion(vagoncito3)
	trenSuarezRetiro.agregarVagonAFormacion(vagoncito4)
	trenSuarezRetiro.agregarLocomotoraAFormacion(locomotora)
	assert.equals(60, trenSuarezRetiro.velocidadMaxima())
}

test "Testeo velocidad Maxima tren Larga Distancia"{
	var buenosAires = new Ciudad()
	var rosario = new Ciudad()
	var tren3 = new FormacionLargaDistancia(ciudad1 = buenosAires , ciudad2 = rosario)
	tren3.agregarVagonAFormacion(vagoncito3)
	tren3.agregarVagonAFormacion(vagoncito4)
	tren3.agregarLocomotoraAFormacion(locomotora)
	assert.equals(80, tren3.velocidadMaxima())
}

test "Velocidad Maxima de trenes larga distancia segun las ciudades origen y destino"{
	var buenosAires = new Ciudad()
	var rosario = new Ciudad()
	var tren3 = new FormacionLargaDistancia(ciudad1 = buenosAires , ciudad2 = rosario)
	tren3.agregarVagonAFormacion(vagoncito3)
	tren3.agregarVagonAFormacion(vagoncito4)
	tren3.agregarLocomotoraAFormacion(locomotora)
	assert.equals(200, tren3.velocidadMaximaLegal())

	}



test "Tren de alta Velocidad esta bien armado"{
	var trenZarate = new FormacionLargaDistancia()
	trenZarate.agregarVagonAFormacion(vagoncito)
	trenZarate.agregarVagonAFormacion(vagoncito)
	trenZarate.agregarLocomotoraAFormacion(locomotora)
	assert.notThat(trenZarate.estaBienArmada())
	trenZarate.agregarLocomotoraAFormacion(locomotora2)
	assert.that(trenZarate.estaBienArmada())
}

}
